cmake_minimum_required(VERSION 2.6)

project(DIAGONAL C)
set(DIAGONAL_VERSION_MAJOR 0)
set(DIAGONAL_VERSION_MINOR 0)
set(DIAGONAL_VERSION_PATCH 1)

include(CheckIncludeFile)
# check required headers
check_include_file(ctype.h HAVE_CTYPE_H)
if(NOT HAVE_CTYPE_H)
  message(FATAL_ERROR "ctype.h is required")
endif(NOT HAVE_CTYPE_H)
check_include_file(errno.h HAVE_ERRNO_H)
if(NOT HAVE_ERRNO_H)
  message(FATAL_ERROR "errno.h is required")
endif(NOT HAVE_ERRNO_H)
check_include_file(inttypes.h HAVE_INTTYPES_H)
if(NOT HAVE_INTTYPES_H)
  message(FATAL_ERROR "inttypes.h is required")
endif(NOT HAVE_INTTYPES_H)
check_include_file(setjmp.h HAVE_SETJMP_H)
if(NOT HAVE_SETJMP_H)
  message(FATAL_ERROR "setjmp.h is required")
endif(NOT HAVE_SETJMP_H)
check_include_file(stdarg.h HAVE_STDARG_H)
if(NOT HAVE_STDARG_H)
  message(FATAL_ERROR "stdarg.h is required")
endif(NOT HAVE_STDARG_H)
check_include_file(stdint.h HAVE_STDINT_H)
if(NOT HAVE_STDINT_H)
  message(FATAL_ERROR "stdint.h is required")
endif(NOT HAVE_STDINT_H)
check_include_file(stdio.h HAVE_STDIO_H)
if(NOT HAVE_STDIO_H)
  message(FATAL_ERROR "stdio.h is required")
endif(NOT HAVE_STDIO_H)
check_include_file(stdlib.h HAVE_STDLIB_H)
if(NOT HAVE_STDLIB_H)
  message(FATAL_ERROR "stdlib.h is required")
endif(NOT HAVE_STDLIB_H)
check_include_file(string.h HAVE_STRING_H)
if(NOT HAVE_STRING_H)
  message(FATAL_ERROR "string.h is required")
endif(NOT HAVE_STRING_H)
# check optional headers
check_include_file(arpa/inet.h HAVE_ARPA_INET_H)
check_include_file(dirent.h HAVE_DIRENT_H)
check_include_file(fcntl.h HAVE_FCNTL_H)
check_include_file(libgen.h HAVE_LIBGEN_H)
check_include_file(sys/mman.h HAVE_SYS_MMAN_H)
check_include_file(sys/stat.h HAVE_SYS_STAT_H)
check_include_file(sys/types.h HAVE_SYS_TYPES_H)
check_include_file(sys/wait.h HAVE_SYS_WAIT_H)
check_include_file(syslog.h HAVE_SYSLOG_H)
check_include_file(unistd.h HAVE_UNISTD_H)

include(CheckTypeSize)

include(FindThreads)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")

include_directories(BEFORE "${DIAGONAL_BINARY_DIR}")
configure_file("${DIAGONAL_SOURCE_DIR}/config.h.cmake" "${DIAGONAL_BINARY_DIR}/config.h")
include_directories("${DIAGONAL_SOURCE_DIR}/src")

add_definitions("-Wall -W -Werror")
if(BUILD_TESTING)
  add_definitions("-g -pg")
endif(BUILD_TESTING)

add_subdirectory(src)
if(BUILD_TESTING)
  enable_testing()
  add_subdirectory(test)
endif(BUILD_TESTING)

set(CPACK_PACKAGE_NAME diagonal)
set(CPACK_PACKAGE_VERSION_MAJOR ${DIAGONAL_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${DIAGONAL_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${DIAGONAL_VERSION_PATCH})
set(CPACK_PACKAGE_VENDOR "Takeshi Abe")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Diagonal, a comprehensive profiling engine")
set(CPACK_RESOURCE_FILE_LICENSE "${DIAGONAL_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${DIAGONAL_SOURCE_DIR}/README")
include(CPack)
